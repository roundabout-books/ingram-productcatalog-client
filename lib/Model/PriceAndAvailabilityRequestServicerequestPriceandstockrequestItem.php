<?php
/**
 * PriceAndAvailabilityRequestServicerequestPriceandstockrequestItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Product Catalog APIs
 *
 * Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*
 *
 * OpenAPI spec version: 5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PriceAndAvailabilityRequestServicerequestPriceandstockrequestItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceAndAvailabilityRequestServicerequestPriceandstockrequestItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'priceAndAvailabilityRequest_servicerequest_priceandstockrequest_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'index' => 'int',
'ingrampartnumber' => 'string',
'vendorpartnumber' => 'string',
'upc' => 'string',
'customerpartnumber' => 'string',
'warehouseidlist' => 'string[]',
'extendedvendorpartnumber' => 'string',
'quantity' => 'float',
'enduserid' => 'string',
'govtprogramtype' => 'string',
'govtendusertype' => 'string',
'specialbidnumber' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'index' => null,
'ingrampartnumber' => null,
'vendorpartnumber' => null,
'upc' => null,
'customerpartnumber' => null,
'warehouseidlist' => null,
'extendedvendorpartnumber' => null,
'quantity' => null,
'enduserid' => null,
'govtprogramtype' => null,
'govtendusertype' => null,
'specialbidnumber' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index' => 'index',
'ingrampartnumber' => 'ingrampartnumber',
'vendorpartnumber' => 'vendorpartnumber',
'upc' => 'upc',
'customerpartnumber' => 'customerpartnumber',
'warehouseidlist' => 'warehouseidlist',
'extendedvendorpartnumber' => 'extendedvendorpartnumber',
'quantity' => 'quantity',
'enduserid' => 'enduserid',
'govtprogramtype' => 'govtprogramtype',
'govtendusertype' => 'govtendusertype',
'specialbidnumber' => 'specialbidnumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index' => 'setIndex',
'ingrampartnumber' => 'setIngrampartnumber',
'vendorpartnumber' => 'setVendorpartnumber',
'upc' => 'setUpc',
'customerpartnumber' => 'setCustomerpartnumber',
'warehouseidlist' => 'setWarehouseidlist',
'extendedvendorpartnumber' => 'setExtendedvendorpartnumber',
'quantity' => 'setQuantity',
'enduserid' => 'setEnduserid',
'govtprogramtype' => 'setGovtprogramtype',
'govtendusertype' => 'setGovtendusertype',
'specialbidnumber' => 'setSpecialbidnumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index' => 'getIndex',
'ingrampartnumber' => 'getIngrampartnumber',
'vendorpartnumber' => 'getVendorpartnumber',
'upc' => 'getUpc',
'customerpartnumber' => 'getCustomerpartnumber',
'warehouseidlist' => 'getWarehouseidlist',
'extendedvendorpartnumber' => 'getExtendedvendorpartnumber',
'quantity' => 'getQuantity',
'enduserid' => 'getEnduserid',
'govtprogramtype' => 'getGovtprogramtype',
'govtendusertype' => 'getGovtendusertype',
'specialbidnumber' => 'getSpecialbidnumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['ingrampartnumber'] = isset($data['ingrampartnumber']) ? $data['ingrampartnumber'] : null;
        $this->container['vendorpartnumber'] = isset($data['vendorpartnumber']) ? $data['vendorpartnumber'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['customerpartnumber'] = isset($data['customerpartnumber']) ? $data['customerpartnumber'] : null;
        $this->container['warehouseidlist'] = isset($data['warehouseidlist']) ? $data['warehouseidlist'] : null;
        $this->container['extendedvendorpartnumber'] = isset($data['extendedvendorpartnumber']) ? $data['extendedvendorpartnumber'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['enduserid'] = isset($data['enduserid']) ? $data['enduserid'] : null;
        $this->container['govtprogramtype'] = isset($data['govtprogramtype']) ? $data['govtprogramtype'] : null;
        $this->container['govtendusertype'] = isset($data['govtendusertype']) ? $data['govtendusertype'] : null;
        $this->container['specialbidnumber'] = isset($data['specialbidnumber']) ? $data['specialbidnumber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets ingrampartnumber
     *
     * @return string
     */
    public function getIngrampartnumber()
    {
        return $this->container['ingrampartnumber'];
    }

    /**
     * Sets ingrampartnumber
     *
     * @param string $ingrampartnumber Ingram Micro SKU number
     *
     * @return $this
     */
    public function setIngrampartnumber($ingrampartnumber)
    {
        $this->container['ingrampartnumber'] = $ingrampartnumber;

        return $this;
    }

    /**
     * Gets vendorpartnumber
     *
     * @return string
     */
    public function getVendorpartnumber()
    {
        return $this->container['vendorpartnumber'];
    }

    /**
     * Sets vendorpartnumber
     *
     * @param string $vendorpartnumber Vendor/Manufacture Part Number
     *
     * @return $this
     */
    public function setVendorpartnumber($vendorpartnumber)
    {
        $this->container['vendorpartnumber'] = $vendorpartnumber;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc Universal Product code
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets customerpartnumber
     *
     * @return string
     */
    public function getCustomerpartnumber()
    {
        return $this->container['customerpartnumber'];
    }

    /**
     * Sets customerpartnumber
     *
     * @param string $customerpartnumber Unique identoifier for the customer, needs custom setup.
     *
     * @return $this
     */
    public function setCustomerpartnumber($customerpartnumber)
    {
        $this->container['customerpartnumber'] = $customerpartnumber;

        return $this;
    }

    /**
     * Gets warehouseidlist
     *
     * @return string[]
     */
    public function getWarehouseidlist()
    {
        return $this->container['warehouseidlist'];
    }

    /**
     * Sets warehouseidlist
     *
     * @param string[] $warehouseidlist Unique identity for Ingram Micro warehouses against which stock details are returned.
     *
     * @return $this
     */
    public function setWarehouseidlist($warehouseidlist)
    {
        $this->container['warehouseidlist'] = $warehouseidlist;

        return $this;
    }

    /**
     * Gets extendedvendorpartnumber
     *
     * @return string
     */
    public function getExtendedvendorpartnumber()
    {
        return $this->container['extendedvendorpartnumber'];
    }

    /**
     * Sets extendedvendorpartnumber
     *
     * @param string $extendedvendorpartnumber extendedvendorpartnumber
     *
     * @return $this
     */
    public function setExtendedvendorpartnumber($extendedvendorpartnumber)
    {
        $this->container['extendedvendorpartnumber'] = $extendedvendorpartnumber;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets enduserid
     *
     * @return string
     */
    public function getEnduserid()
    {
        return $this->container['enduserid'];
    }

    /**
     * Sets enduserid
     *
     * @param string $enduserid enduserid
     *
     * @return $this
     */
    public function setEnduserid($enduserid)
    {
        $this->container['enduserid'] = $enduserid;

        return $this;
    }

    /**
     * Gets govtprogramtype
     *
     * @return string
     */
    public function getGovtprogramtype()
    {
        return $this->container['govtprogramtype'];
    }

    /**
     * Sets govtprogramtype
     *
     * @param string $govtprogramtype govtprogramtype
     *
     * @return $this
     */
    public function setGovtprogramtype($govtprogramtype)
    {
        $this->container['govtprogramtype'] = $govtprogramtype;

        return $this;
    }

    /**
     * Gets govtendusertype
     *
     * @return string
     */
    public function getGovtendusertype()
    {
        return $this->container['govtendusertype'];
    }

    /**
     * Sets govtendusertype
     *
     * @param string $govtendusertype govtendusertype
     *
     * @return $this
     */
    public function setGovtendusertype($govtendusertype)
    {
        $this->container['govtendusertype'] = $govtendusertype;

        return $this;
    }

    /**
     * Gets specialbidnumber
     *
     * @return string
     */
    public function getSpecialbidnumber()
    {
        return $this->container['specialbidnumber'];
    }

    /**
     * Sets specialbidnumber
     *
     * @param string $specialbidnumber specialbidnumber
     *
     * @return $this
     */
    public function setSpecialbidnumber($specialbidnumber)
    {
        $this->container['specialbidnumber'] = $specialbidnumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
