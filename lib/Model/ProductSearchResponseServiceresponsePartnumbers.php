<?php
/**
 * ProductSearchResponseServiceresponsePartnumbers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Product Catalog APIs
 *
 * Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*
 *
 * OpenAPI spec version: 5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductSearchResponseServiceresponsePartnumbers Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductSearchResponseServiceresponsePartnumbers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'productSearchResponse_serviceresponse_partnumbers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ingrampartnumber' => 'string',
'manufacturerpartnumber' => 'string',
'upccode' => 'string',
'productdescription' => 'string',
'currency' => 'string',
'haswarranty' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ingrampartnumber' => null,
'manufacturerpartnumber' => null,
'upccode' => null,
'productdescription' => null,
'currency' => null,
'haswarranty' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ingrampartnumber' => 'ingrampartnumber',
'manufacturerpartnumber' => 'manufacturerpartnumber',
'upccode' => 'upccode',
'productdescription' => 'productdescription',
'currency' => 'currency',
'haswarranty' => 'haswarranty'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ingrampartnumber' => 'setIngrampartnumber',
'manufacturerpartnumber' => 'setManufacturerpartnumber',
'upccode' => 'setUpccode',
'productdescription' => 'setProductdescription',
'currency' => 'setCurrency',
'haswarranty' => 'setHaswarranty'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ingrampartnumber' => 'getIngrampartnumber',
'manufacturerpartnumber' => 'getManufacturerpartnumber',
'upccode' => 'getUpccode',
'productdescription' => 'getProductdescription',
'currency' => 'getCurrency',
'haswarranty' => 'getHaswarranty'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ingrampartnumber'] = isset($data['ingrampartnumber']) ? $data['ingrampartnumber'] : null;
        $this->container['manufacturerpartnumber'] = isset($data['manufacturerpartnumber']) ? $data['manufacturerpartnumber'] : null;
        $this->container['upccode'] = isset($data['upccode']) ? $data['upccode'] : null;
        $this->container['productdescription'] = isset($data['productdescription']) ? $data['productdescription'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['haswarranty'] = isset($data['haswarranty']) ? $data['haswarranty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ingrampartnumber
     *
     * @return string
     */
    public function getIngrampartnumber()
    {
        return $this->container['ingrampartnumber'];
    }

    /**
     * Sets ingrampartnumber
     *
     * @param string $ingrampartnumber Ingram Part Number
     *
     * @return $this
     */
    public function setIngrampartnumber($ingrampartnumber)
    {
        $this->container['ingrampartnumber'] = $ingrampartnumber;

        return $this;
    }

    /**
     * Gets manufacturerpartnumber
     *
     * @return string
     */
    public function getManufacturerpartnumber()
    {
        return $this->container['manufacturerpartnumber'];
    }

    /**
     * Sets manufacturerpartnumber
     *
     * @param string $manufacturerpartnumber Vendor or Manufacturer Part Number
     *
     * @return $this
     */
    public function setManufacturerpartnumber($manufacturerpartnumber)
    {
        $this->container['manufacturerpartnumber'] = $manufacturerpartnumber;

        return $this;
    }

    /**
     * Gets upccode
     *
     * @return string
     */
    public function getUpccode()
    {
        return $this->container['upccode'];
    }

    /**
     * Sets upccode
     *
     * @param string $upccode UPC
     *
     * @return $this
     */
    public function setUpccode($upccode)
    {
        $this->container['upccode'] = $upccode;

        return $this;
    }

    /**
     * Gets productdescription
     *
     * @return string
     */
    public function getProductdescription()
    {
        return $this->container['productdescription'];
    }

    /**
     * Sets productdescription
     *
     * @param string $productdescription Product description
     *
     * @return $this
     */
    public function setProductdescription($productdescription)
    {
        $this->container['productdescription'] = $productdescription;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets haswarranty
     *
     * @return string
     */
    public function getHaswarranty()
    {
        return $this->container['haswarranty'];
    }

    /**
     * Sets haswarranty
     *
     * @param string $haswarranty haswarranty
     *
     * @return $this
     */
    public function setHaswarranty($haswarranty)
    {
        $this->container['haswarranty'] = $haswarranty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
