<?php
/**
 * PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Product Catalog APIs
 *
 * Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*
 *
 * OpenAPI spec version: 5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'priceAndAvailabilityResponse_serviceresponse_priceandstockresponse_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'itemstatus' => 'string',
'statusmessage' => 'string',
'ingrampartnumber' => 'string',
'vendorpartnumber' => 'string',
'globalskuid' => 'string',
'customerprice' => 'float',
'partdescription1' => 'string',
'partdescription2' => 'string',
'vendornumber' => 'string',
'vendorname' => 'string',
'cpucode' => 'string',
'class' => 'string',
'skustatus' => 'string',
'mediacpu' => 'string',
'categorysubcategory' => 'string',
'retailprice' => 'float',
'newmedia' => 'string',
'enduserrequired' => 'string',
'backorderflag' => 'string',
'skuauthorized' => 'string',
'extendedvendorpartnumber' => 'string',
'warehousedetails' => '\Swagger\Client\Model\WarehouseListType[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'itemstatus' => null,
'statusmessage' => null,
'ingrampartnumber' => null,
'vendorpartnumber' => null,
'globalskuid' => null,
'customerprice' => null,
'partdescription1' => null,
'partdescription2' => null,
'vendornumber' => null,
'vendorname' => null,
'cpucode' => null,
'class' => null,
'skustatus' => null,
'mediacpu' => null,
'categorysubcategory' => null,
'retailprice' => null,
'newmedia' => null,
'enduserrequired' => null,
'backorderflag' => null,
'skuauthorized' => null,
'extendedvendorpartnumber' => null,
'warehousedetails' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemstatus' => 'itemstatus',
'statusmessage' => 'statusmessage',
'ingrampartnumber' => 'ingrampartnumber',
'vendorpartnumber' => 'vendorpartnumber',
'globalskuid' => 'globalskuid',
'customerprice' => 'customerprice',
'partdescription1' => 'partdescription1',
'partdescription2' => 'partdescription2',
'vendornumber' => 'vendornumber',
'vendorname' => 'vendorname',
'cpucode' => 'cpucode',
'class' => 'class',
'skustatus' => 'skustatus',
'mediacpu' => 'mediacpu',
'categorysubcategory' => 'categorysubcategory',
'retailprice' => 'retailprice',
'newmedia' => 'newmedia',
'enduserrequired' => 'enduserrequired',
'backorderflag' => 'backorderflag',
'skuauthorized' => 'skuauthorized',
'extendedvendorpartnumber' => 'extendedvendorpartnumber',
'warehousedetails' => 'warehousedetails'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemstatus' => 'setItemstatus',
'statusmessage' => 'setStatusmessage',
'ingrampartnumber' => 'setIngrampartnumber',
'vendorpartnumber' => 'setVendorpartnumber',
'globalskuid' => 'setGlobalskuid',
'customerprice' => 'setCustomerprice',
'partdescription1' => 'setPartdescription1',
'partdescription2' => 'setPartdescription2',
'vendornumber' => 'setVendornumber',
'vendorname' => 'setVendorname',
'cpucode' => 'setCpucode',
'class' => 'setClass',
'skustatus' => 'setSkustatus',
'mediacpu' => 'setMediacpu',
'categorysubcategory' => 'setCategorysubcategory',
'retailprice' => 'setRetailprice',
'newmedia' => 'setNewmedia',
'enduserrequired' => 'setEnduserrequired',
'backorderflag' => 'setBackorderflag',
'skuauthorized' => 'setSkuauthorized',
'extendedvendorpartnumber' => 'setExtendedvendorpartnumber',
'warehousedetails' => 'setWarehousedetails'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemstatus' => 'getItemstatus',
'statusmessage' => 'getStatusmessage',
'ingrampartnumber' => 'getIngrampartnumber',
'vendorpartnumber' => 'getVendorpartnumber',
'globalskuid' => 'getGlobalskuid',
'customerprice' => 'getCustomerprice',
'partdescription1' => 'getPartdescription1',
'partdescription2' => 'getPartdescription2',
'vendornumber' => 'getVendornumber',
'vendorname' => 'getVendorname',
'cpucode' => 'getCpucode',
'class' => 'getClass',
'skustatus' => 'getSkustatus',
'mediacpu' => 'getMediacpu',
'categorysubcategory' => 'getCategorysubcategory',
'retailprice' => 'getRetailprice',
'newmedia' => 'getNewmedia',
'enduserrequired' => 'getEnduserrequired',
'backorderflag' => 'getBackorderflag',
'skuauthorized' => 'getSkuauthorized',
'extendedvendorpartnumber' => 'getExtendedvendorpartnumber',
'warehousedetails' => 'getWarehousedetails'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ITEMSTATUS_SUCCESS = 'SUCCESS';
const ITEMSTATUS_FAILED = 'FAILED';
const MODEL_CLASS_A = 'A';
const MODEL_CLASS_B = 'B';
const MODEL_CLASS_C = 'C';
const MODEL_CLASS_D = 'D';
const MODEL_CLASS_E = 'E';
const MODEL_CLASS_F = 'F';
const MODEL_CLASS_N = 'N';
const MODEL_CLASS_O = 'O';
const MODEL_CLASS_S = 'S';
const MODEL_CLASS_V = 'V';
const MODEL_CLASS_X = 'X';
const SKUSTATUS_ACTIVE = 'ACTIVE';
const ENDUSERREQUIRED_Y = 'Y';
const ENDUSERREQUIRED_N = 'N';
const BACKORDERFLAG_Y = 'Y';
const BACKORDERFLAG_N = 'N';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemstatusAllowableValues()
    {
        return [
            self::ITEMSTATUS_SUCCESS,
self::ITEMSTATUS_FAILED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassAllowableValues()
    {
        return [
            self::MODEL_CLASS_A,
self::MODEL_CLASS_B,
self::MODEL_CLASS_C,
self::MODEL_CLASS_D,
self::MODEL_CLASS_E,
self::MODEL_CLASS_F,
self::MODEL_CLASS_N,
self::MODEL_CLASS_O,
self::MODEL_CLASS_S,
self::MODEL_CLASS_V,
self::MODEL_CLASS_X,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSkustatusAllowableValues()
    {
        return [
            self::SKUSTATUS_ACTIVE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnduserrequiredAllowableValues()
    {
        return [
            self::ENDUSERREQUIRED_Y,
self::ENDUSERREQUIRED_N,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackorderflagAllowableValues()
    {
        return [
            self::BACKORDERFLAG_Y,
self::BACKORDERFLAG_N,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemstatus'] = isset($data['itemstatus']) ? $data['itemstatus'] : null;
        $this->container['statusmessage'] = isset($data['statusmessage']) ? $data['statusmessage'] : null;
        $this->container['ingrampartnumber'] = isset($data['ingrampartnumber']) ? $data['ingrampartnumber'] : null;
        $this->container['vendorpartnumber'] = isset($data['vendorpartnumber']) ? $data['vendorpartnumber'] : null;
        $this->container['globalskuid'] = isset($data['globalskuid']) ? $data['globalskuid'] : null;
        $this->container['customerprice'] = isset($data['customerprice']) ? $data['customerprice'] : null;
        $this->container['partdescription1'] = isset($data['partdescription1']) ? $data['partdescription1'] : null;
        $this->container['partdescription2'] = isset($data['partdescription2']) ? $data['partdescription2'] : null;
        $this->container['vendornumber'] = isset($data['vendornumber']) ? $data['vendornumber'] : null;
        $this->container['vendorname'] = isset($data['vendorname']) ? $data['vendorname'] : null;
        $this->container['cpucode'] = isset($data['cpucode']) ? $data['cpucode'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['skustatus'] = isset($data['skustatus']) ? $data['skustatus'] : null;
        $this->container['mediacpu'] = isset($data['mediacpu']) ? $data['mediacpu'] : null;
        $this->container['categorysubcategory'] = isset($data['categorysubcategory']) ? $data['categorysubcategory'] : null;
        $this->container['retailprice'] = isset($data['retailprice']) ? $data['retailprice'] : null;
        $this->container['newmedia'] = isset($data['newmedia']) ? $data['newmedia'] : null;
        $this->container['enduserrequired'] = isset($data['enduserrequired']) ? $data['enduserrequired'] : null;
        $this->container['backorderflag'] = isset($data['backorderflag']) ? $data['backorderflag'] : null;
        $this->container['skuauthorized'] = isset($data['skuauthorized']) ? $data['skuauthorized'] : null;
        $this->container['extendedvendorpartnumber'] = isset($data['extendedvendorpartnumber']) ? $data['extendedvendorpartnumber'] : null;
        $this->container['warehousedetails'] = isset($data['warehousedetails']) ? $data['warehousedetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getItemstatusAllowableValues();
        if (!is_null($this->container['itemstatus']) && !in_array($this->container['itemstatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'itemstatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClassAllowableValues();
        if (!is_null($this->container['class']) && !in_array($this->container['class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'class', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSkustatusAllowableValues();
        if (!is_null($this->container['skustatus']) && !in_array($this->container['skustatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'skustatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnduserrequiredAllowableValues();
        if (!is_null($this->container['enduserrequired']) && !in_array($this->container['enduserrequired'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'enduserrequired', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBackorderflagAllowableValues();
        if (!is_null($this->container['backorderflag']) && !in_array($this->container['backorderflag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'backorderflag', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itemstatus
     *
     * @return string
     */
    public function getItemstatus()
    {
        return $this->container['itemstatus'];
    }

    /**
     * Sets itemstatus
     *
     * @param string $itemstatus SUCCESS or FAILED
     *
     * @return $this
     */
    public function setItemstatus($itemstatus)
    {
        $allowedValues = $this->getItemstatusAllowableValues();
        if (!is_null($itemstatus) && !in_array($itemstatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'itemstatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['itemstatus'] = $itemstatus;

        return $this;
    }

    /**
     * Gets statusmessage
     *
     * @return string
     */
    public function getStatusmessage()
    {
        return $this->container['statusmessage'];
    }

    /**
     * Sets statusmessage
     *
     * @param string $statusmessage Description of itemstatus
     *
     * @return $this
     */
    public function setStatusmessage($statusmessage)
    {
        $this->container['statusmessage'] = $statusmessage;

        return $this;
    }

    /**
     * Gets ingrampartnumber
     *
     * @return string
     */
    public function getIngrampartnumber()
    {
        return $this->container['ingrampartnumber'];
    }

    /**
     * Sets ingrampartnumber
     *
     * @param string $ingrampartnumber Ingram Micro part number
     *
     * @return $this
     */
    public function setIngrampartnumber($ingrampartnumber)
    {
        $this->container['ingrampartnumber'] = $ingrampartnumber;

        return $this;
    }

    /**
     * Gets vendorpartnumber
     *
     * @return string
     */
    public function getVendorpartnumber()
    {
        return $this->container['vendorpartnumber'];
    }

    /**
     * Sets vendorpartnumber
     *
     * @param string $vendorpartnumber Manufacturer/Vendor part number
     *
     * @return $this
     */
    public function setVendorpartnumber($vendorpartnumber)
    {
        $this->container['vendorpartnumber'] = $vendorpartnumber;

        return $this;
    }

    /**
     * Gets globalskuid
     *
     * @return string
     */
    public function getGlobalskuid()
    {
        return $this->container['globalskuid'];
    }

    /**
     * Sets globalskuid
     *
     * @param string $globalskuid globalskuid
     *
     * @return $this
     */
    public function setGlobalskuid($globalskuid)
    {
        $this->container['globalskuid'] = $globalskuid;

        return $this;
    }

    /**
     * Gets customerprice
     *
     * @return float
     */
    public function getCustomerprice()
    {
        return $this->container['customerprice'];
    }

    /**
     * Sets customerprice
     *
     * @param float $customerprice Customer specific price for the product, excluding taxes
     *
     * @return $this
     */
    public function setCustomerprice($customerprice)
    {
        $this->container['customerprice'] = $customerprice;

        return $this;
    }

    /**
     * Gets partdescription1
     *
     * @return string
     */
    public function getPartdescription1()
    {
        return $this->container['partdescription1'];
    }

    /**
     * Sets partdescription1
     *
     * @param string $partdescription1 Product description part 1
     *
     * @return $this
     */
    public function setPartdescription1($partdescription1)
    {
        $this->container['partdescription1'] = $partdescription1;

        return $this;
    }

    /**
     * Gets partdescription2
     *
     * @return string
     */
    public function getPartdescription2()
    {
        return $this->container['partdescription2'];
    }

    /**
     * Sets partdescription2
     *
     * @param string $partdescription2 Product description part 2
     *
     * @return $this
     */
    public function setPartdescription2($partdescription2)
    {
        $this->container['partdescription2'] = $partdescription2;

        return $this;
    }

    /**
     * Gets vendornumber
     *
     * @return string
     */
    public function getVendornumber()
    {
        return $this->container['vendornumber'];
    }

    /**
     * Sets vendornumber
     *
     * @param string $vendornumber vendornumber
     *
     * @return $this
     */
    public function setVendornumber($vendornumber)
    {
        $this->container['vendornumber'] = $vendornumber;

        return $this;
    }

    /**
     * Gets vendorname
     *
     * @return string
     */
    public function getVendorname()
    {
        return $this->container['vendorname'];
    }

    /**
     * Sets vendorname
     *
     * @param string $vendorname Name of the vendor
     *
     * @return $this
     */
    public function setVendorname($vendorname)
    {
        $this->container['vendorname'] = $vendorname;

        return $this;
    }

    /**
     * Gets cpucode
     *
     * @return string
     */
    public function getCpucode()
    {
        return $this->container['cpucode'];
    }

    /**
     * Sets cpucode
     *
     * @param string $cpucode cpucode
     *
     * @return $this
     */
    public function setCpucode($cpucode)
    {
        $this->container['cpucode'] = $cpucode;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor
     *
     * @return $this
     */
    public function setClass($class)
    {
        $allowedValues = $this->getClassAllowableValues();
        if (!is_null($class) && !in_array($class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'class', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets skustatus
     *
     * @return string
     */
    public function getSkustatus()
    {
        return $this->container['skustatus'];
    }

    /**
     * Sets skustatus
     *
     * @param string $skustatus Identifies if the SKU has been discontinued.
     *
     * @return $this
     */
    public function setSkustatus($skustatus)
    {
        $allowedValues = $this->getSkustatusAllowableValues();
        if (!is_null($skustatus) && !in_array($skustatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'skustatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['skustatus'] = $skustatus;

        return $this;
    }

    /**
     * Gets mediacpu
     *
     * @return string
     */
    public function getMediacpu()
    {
        return $this->container['mediacpu'];
    }

    /**
     * Sets mediacpu
     *
     * @param string $mediacpu mediacpu
     *
     * @return $this
     */
    public function setMediacpu($mediacpu)
    {
        $this->container['mediacpu'] = $mediacpu;

        return $this;
    }

    /**
     * Gets categorysubcategory
     *
     * @return string
     */
    public function getCategorysubcategory()
    {
        return $this->container['categorysubcategory'];
    }

    /**
     * Sets categorysubcategory
     *
     * @param string $categorysubcategory categorysubcategory
     *
     * @return $this
     */
    public function setCategorysubcategory($categorysubcategory)
    {
        $this->container['categorysubcategory'] = $categorysubcategory;

        return $this;
    }

    /**
     * Gets retailprice
     *
     * @return float
     */
    public function getRetailprice()
    {
        return $this->container['retailprice'];
    }

    /**
     * Sets retailprice
     *
     * @param float $retailprice retailprice
     *
     * @return $this
     */
    public function setRetailprice($retailprice)
    {
        $this->container['retailprice'] = $retailprice;

        return $this;
    }

    /**
     * Gets newmedia
     *
     * @return string
     */
    public function getNewmedia()
    {
        return $this->container['newmedia'];
    }

    /**
     * Sets newmedia
     *
     * @param string $newmedia newmedia
     *
     * @return $this
     */
    public function setNewmedia($newmedia)
    {
        $this->container['newmedia'] = $newmedia;

        return $this;
    }

    /**
     * Gets enduserrequired
     *
     * @return string
     */
    public function getEnduserrequired()
    {
        return $this->container['enduserrequired'];
    }

    /**
     * Sets enduserrequired
     *
     * @param string $enduserrequired Y - End user required N - Not required End user
     *
     * @return $this
     */
    public function setEnduserrequired($enduserrequired)
    {
        $allowedValues = $this->getEnduserrequiredAllowableValues();
        if (!is_null($enduserrequired) && !in_array($enduserrequired, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'enduserrequired', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enduserrequired'] = $enduserrequired;

        return $this;
    }

    /**
     * Gets backorderflag
     *
     * @return string
     */
    public function getBackorderflag()
    {
        return $this->container['backorderflag'];
    }

    /**
     * Sets backorderflag
     *
     * @param string $backorderflag Y- Allow Backorder Flag N- Not allowed
     *
     * @return $this
     */
    public function setBackorderflag($backorderflag)
    {
        $allowedValues = $this->getBackorderflagAllowableValues();
        if (!is_null($backorderflag) && !in_array($backorderflag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'backorderflag', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['backorderflag'] = $backorderflag;

        return $this;
    }

    /**
     * Gets skuauthorized
     *
     * @return string
     */
    public function getSkuauthorized()
    {
        return $this->container['skuauthorized'];
    }

    /**
     * Sets skuauthorized
     *
     * @param string $skuauthorized skuauthorized
     *
     * @return $this
     */
    public function setSkuauthorized($skuauthorized)
    {
        $this->container['skuauthorized'] = $skuauthorized;

        return $this;
    }

    /**
     * Gets extendedvendorpartnumber
     *
     * @return string
     */
    public function getExtendedvendorpartnumber()
    {
        return $this->container['extendedvendorpartnumber'];
    }

    /**
     * Sets extendedvendorpartnumber
     *
     * @param string $extendedvendorpartnumber extendedvendorpartnumber
     *
     * @return $this
     */
    public function setExtendedvendorpartnumber($extendedvendorpartnumber)
    {
        $this->container['extendedvendorpartnumber'] = $extendedvendorpartnumber;

        return $this;
    }

    /**
     * Gets warehousedetails
     *
     * @return \Swagger\Client\Model\WarehouseListType[]
     */
    public function getWarehousedetails()
    {
        return $this->container['warehousedetails'];
    }

    /**
     * Sets warehousedetails
     *
     * @param \Swagger\Client\Model\WarehouseListType[] $warehousedetails warehousedetails
     *
     * @return $this
     */
    public function setWarehousedetails($warehousedetails)
    {
        $this->container['warehousedetails'] = $warehousedetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
